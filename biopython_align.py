seq_gigas ='MSAPTCLPLRSCFFPGVSGMSAPWNAVAPEQPARQELKLFLFVLGFTYALALAVHMHEIYGWQNPALVVDGEFIQGTHDSYHWLAGAKGVGEAVGTPLAVMAAGFASLTGMPLGLAGFVIPPLFAGLVGLVMAVWCRVLGWKEGAAAGGLVAGLLTVLSPGFYFRSRLGYYDTDMVTLLFPLLFTLGLAMAMGRWIRPSWRHREPLQEEPPQTIARVLAWLVLLGLLARFGAVWHGHILTFVKVLCGFSVCWGLAAGRPGARGRLMLGLAVFMASALVGWPGLACSLALWALAWKKPEMVSQWARAPWPGLAALVLLAVLGGVAQTTLQSATELLGAYLKPAADVTGSVNTTGVIYPGIGQSVIEVQNIALERVLERFHTSWLVAATGLLCFLGVLVLRPVALPLAIFLVMGLASVKLGSRLTMFGGAPMAIGLGMAVGWAGVALFRSGPGAGYKRFLLSCAATVVLGWPLVSFYISLPPTPVLSRQHCMALQSLKTSPPESKVWTWWDWGYPTHYYAERISFADGGRHYGHHIFPLGLVLTTPNPRLSAQLIKYSAQWNDEPWKAWDAMPRNEMLALLQGLGNATQPLPPFAAPRYVVATFENIRLAPWITYYGTWDMTTQQGLHGRLLEIRDAFRINYEKGEVQFTQREGVLPVASIDVLDRKERRSDVFPRNQGPHLVVHMAAQKYYLLDDQIYNSM MVQLLLEDPKKPRFGDYFSLVYDDFPDVRVFEVR'


seq_marinas = 'MIFSREHSIRRDWKALIVTCVIVMLAGMAVRMQELPEWNQPAYRVAGEFIMGTHDAYHWLAGAMGFGSAADAPPSELLRALSHMTGISVGNLGFFLPAIFGGLVGAATVLWAWALGGLEAGLVAGVIATLAPGYYYRSRLGYYDTDIVTLLFPLLLTFGLAIWLDGSLCDSWVNRFRSAFSKKNGKAVADATKDEGAEEETAAPDEPDEPRRFFLIWPALLGGFGSWAALWHGYMLTFLQLTVFMLLFLVFVAGKRGRRGALLWGVAAFAAAGFWGLYGTLGAVVAALLAGALPKNIRAKVYSLAPGLLAAAVVLVASGAAESIVVGGSKFLASYIKPVAQQTAFRGDTGELVFPGIGQSVIEAQNLPLAEVFDRFHPWGWLSLAGIGGFFMLLVLRPSALFLLPFLAIALSAVKLGTRMAMFGAPAVGLGLGFLFLWIGRAVLGGQSWSRYVLTFILGALALGVALPGVSLFLTLPPTPVLSRHHAQALIDLGKEADKSSEVWTWWDWGYATHYYAGLQSFADGGRHYGEHVFTLGLALTTPSPMQSAQLIQYSAEHNEEPWTEWEKMGLDKTRDFLRSLGTEDLHLKPPMPLYVVATFENIRLSPWICYYGTWDFEKEQGVHARVASIRESFNLDWEKGTMTFQDEKEPIEVKSIHVLSSQGRKDRHYDKNTGPNLILNSESRRYYALDDLAFQSMLTQLLIAPKEFERLDRYFELVYDDFPWVRVYKVREVPKDAPAKPQTPAVESPEANGTAANATQPTNGTESGENTTQPANTTQ'


seq_alaskensis='MTILHVSASPAAGRKQLVVLCTAAYCIALGVRLLELPGWSAYDALYKGEHLLATHDAYHWLAAATGFEFD QQHPLARMLAFLHSLTGIACGNLAFYLPAVMACLVAPLMVGWGAALGMPLAGFTAGLLTACAPGLMTRTG LGYYDTDLLISGALIVNTLVPALWLRNSLHNPLRTISAALRRPSAAEQPAPPPAAESTGPVWFAVLLCCGLFVYWQPAIHNMFNLMGKAFPGIALVLAALLGRRAAMRRTAEGLLIYIFCALAGPAGAGAAMLLWLAGRKNPRSLDRLYTGRRALFAALVLLAAATALEPAGLNYMRSAIKGYSGEKSAVVAHTLSYPSVVGSIIEAQKLSFDAFLTSVHGWTWLAAGGLALFFLLMLAEPVTALLLPLAAMGLGSVALGARFAMFAAPCFALGTAWALHLAVHGAARLAHRNAAQPLPAPHRRAAMLCSVAAACIMCWPSAQLAAALAQGPIISTRQVEALDFIRGNTPEDSMLWYWWDWGYAAQYYARRTTVADGARHSNQRIYAPAAVLTTDVPRFANQLIKYVAGAQPPVSGAFAGLDAGQTMEKLHSFYLRETQPSPPQKQYLIVSAEQLRLGAWISRFGTWDFNTRQWEETTVLAIDRPVQYSPQKGLFLIKGLDPMQAESLTVFEGTRVVNHQYPHFSGRHFVIDKDQGMILVVDRTVYNSMALQLLVNDGSNEDISRYFRLVFSNGKTKVYEVL'

seq_sulfuricans_pooja="KQLVVLCTAAYCIALGVRLLELPGWSAYDALYKGEHLLATHDAYHWLAAATGFEFDQQHPLARMLAFLHSLTGIACGNLAFYLPAVMACLVAPLMVGWGAALGMPLAGFTAGLLTACAPGLMTRTGLGYYDTDLLISGALIVNTLVPALWLRNSLHNPLRTISAALRRPSAAEQPAPPPAAESTGPVWFAVLLCCGLFVYWQPAIHNMFNLMGKAFPGIALVLAALLGRRAAMRRTAEGLLIYIFCALAGPAGAGAAMLLWLAGRKNPRSLDRLYTGRRALFAALVLLAAATALEPAGLNYMRSAIKGYSGEKSAVVAHTLSYPSVVGSIIEAQKLSFDAFLTSVHGWTWLAAGGLALFFLLMLAEPVTALLLPLAAMGLGSVALGARFAMFAAPCFALGTAWALHLAVHGAARLAHRNAAQPLPAPHRRAAMLCSVAAACIMCWPSAQLAAALAQGPIISTRQVEALDFIRGNTPEDSMLWYWWDWGYAAQYYARRTTVADGARHSNQRIYAPAAVLTTDVPRFANQLIKYVAGAQPPVSGAFAGLDAGQTMEKLHSFYLRETQPSPPQKQYLIVSAEQLRLGAWISRFGTWDFNTRQWEETTVLAIDRPVQYSPQKGLFLIKGLDPMQAESLTVFEGTRVVNHQYPHFSGRHFVIDKDQGMILVVDRTVYNSMALQLLVNDGSNEDISRYFRLVFSNGKTKVYEVL"

seq_clari='''
MKLQQNFTDNNSIKYTCILILIAFAFSVLCRLYWVAWASEFYEFFFNDQLMITTNDGYAF
AEGARDMIAGFHQPNDLSYFGSSLSTLTYWLYSILPFSFESIILYMSAFFASLIVVPIIL
IAREYKLTTYGFIAALLGSIANSYYNRTMSGYYDTDMLVLVLPMLILLTFIRLTINKDIF
TLLLSPVFIMIYLWWYPSSYSLNFAMIGLFGLYTLVFHRKEKIFYLTIALMIIALSMLAW
QYKLALIVLLFAIFAFKEEKINFYMIWALIFISILILHLSGGLDPVLYQLKFYVFKASDV
QNLKDAAFMYFNVNETIMEVNTIDPEVFMQRISSSVLVFILSFIGFILLCKDHKSMLLAL
PMLALGFMALRAGLRFTIYAVPVMALGFGYFLYAFFNFLEKKQIKLSLRNKNILLILIAF
FSISPALMHIYYYKSSTVFTSYEASILNDLKNKAQREDYVVAWWDYGYPIRYYSDVKTLI
DGGKHLGKDNFFSSFVLSKEQIPAANMARLSVEYTEKSFKENYPDVLKAMVKDYNKTSAK
DFLESLNDKDFKFDTNKTRDVYIYMPYRMLRIMPVVAQFANTNPDNGEQEKSLFFSQANA
IAQDKTTGSVMLDNGVEIINDFRALKVEGASIPLKAFVDIESITNGKFYYNEIDSKAQIY
LLFLREYKSFVILDESLYNSSYIQMFLLNQYDQDLFEQITNDTRAKIYRLKR
'''

seq_jejuni='''
MLKKEYLKNPYLVLFAMIVLAYVFSVFCRFYWVWWASEFNEYFFNNQLMIISNDGYAFAE
GARDMIAGFHQPNDLSYYGSSLSTLTYWLYKITPFSFESIILYMSTFLSSLVVIPIILLA
NEYKRPLMGFVAALLASVANSYYNRTMSGYYDTDMLVIVLPMFILFFMVRMILKKDFFSL
IALPLFIGIYLWWYPSSYTLNVALIGLFLIYTLIFHRKEKIFYIAVILSSLTLSNIAWFY
QSAIIVILFALFALEQKRLNFMIIGILGSATLIFLILSGGVDPILYQLKFYIFRSDESAN
LTQGFMYFNVNQTIQEVENVDFSEFMRRISGSEIVFLFSLFGFVWLLRKHKSMIMALPIL
VLGFLALKGGLRFTIYSVPVMALGFGFLLSEFKAILVKKYSQLTSNVCIVFATILTLAPV
FIHIYNYKAPTVFSQNEASLLNQLKNIANREDYVVTWWDYGYPVRYYSDVKTLVDGGKHL
GKDNFFPSFSLSKDEQAAANMARLSVEYTEKSFYAPQNDILKSDILQAMMKDYNQSNVDL
FLASLSKPDFKIDTPKTRDIYLYMPARMSLIFSTVASFSFINLDTGVLDKPFTFSTAYPL
DVKNGEIYLSNGVVLSDDFRSFKIGDNVVSVNSIVEINSIKQGEYKITPIDDKAQFYIFY
LKDSAIPYAQFILMDKTMFNSAYVQMFFLGNYDKNLFDLVINSRDAKVFKLKI
'''


sequences = dict(gigas=seq_gigas.strip(),
                 marinus=seq_marinas.strip(),
                 alaskensis=seq_alaskensis.strip(),
                 sulfuricans=seq_sulfuricans_pooja.strip(),
                 clari=seq_clari.strip(),
                 jejuni=seq_jejuni.strip())

from Bio import Align,AlignIO
from Bio import pairwise2
from Bio.pairwise2 import format_alignment
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
from Bio.Align import MultipleSeqAlignment
import os,sys
import numpy as np
'''
aligned
eturn the indices of subsequences aligned to each other.

This property returns the start and end indices of subsequences in the target and query sequence that were aligned to each other. If the alignment between target (t) and query (q) consists of N chunks, you get two tuples of length N:

(((t_start1, t_end1), (t_start2, t_end2), …, (t_startN, t_endN)),
((q_start1, q_end1), (q_start2, q_end2), …, (q_startN, q_endN)))
'''

def cleanup_sequences():
 for key in sequences:
  seq = ''.join(sequences[key].split())
  sequences[key]=seq

def get_aligned_subsequence(ref='jejuni'):
 alignments={}
 for key in sequences:
  print(key)
  if key==ref:
    continue
  #print(sequences[ref])
  seqref = ''.join(sequences[ref].split())
  seq = ''.join(sequences[key].split())
  aligner = Align.PairwiseAligner()
  alignments[key]=aligner.align(seqref,seq) #target,query

 subsequences_aligned={}
 for key in alignments:
  subsequences_aligned[key] = alignments[key][0].aligned

 return subsequences_aligned


def get_list_target(ref='marinus',reflist=[375,418,422]):
 alignments = get_aligned_subsequence(ref=ref)
 for key in alignments:
  print(key)
  #clustalwriter = AlignIO.write(alignments[key],'alignment_%s_ref%s.txt' %(key,ref),'phylip')
  ref_subsequences = alignments[key][0]
  query_subsequences = alignments[key][1]
  for lookup in reflist:
    ref_tuple_index = [i for i in range(0,len(ref_subsequences)) if ((lookup >= ref_subsequences[i][0]) and (lookup < ref_subsequences[i][1]) )]
    if len(ref_tuple_index) != 1:
      continue
    rss = ref_subsequences[ref_tuple_index[0]]
    qss = query_subsequences[ref_tuple_index[0]]
    aa_lookup = (lookup - rss[0])
    aa_lookup_query = qss[0]+aa_lookup
    ref_subseq_lookup = sequences[ref][lookup-1-1 : lookup-1+2]
    query_subseq_lookup = sequences[key][aa_lookup_query-1-1 : aa_lookup_query-1+2]
    print(ref_tuple_index,ref_subsequences[ref_tuple_index[0]],query_subsequences[ref_tuple_index[0]])
    print(lookup,aa_lookup_query,ref_subseq_lookup,query_subseq_lookup)


if __name__=='__main__':
 cleanup_sequences()
